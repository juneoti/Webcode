/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2024-12-03 05:33:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1098646424000L));
    _jspx_dependants.put("jar:file:/C:/Users/sdedu/Desktop/WEB_CODES/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Web09_MVC/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardTitle }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>글 보기</h2>\r\n");
      out.write("	<div>\r\n");
      out.write("		<p>글 번호 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<p>제목 : </p>\r\n");
      out.write("		<p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardTitle }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<p>작성자 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.memberId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("		<p>작성일 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardDateCreated }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div>\r\n");
      out.write("		<textarea rows=\"20\" cols=\"120\" readonly=\"readonly\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardContent }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<a href=\"index.jsp\"><input type=\"button\" value=\"글 목록\"></a>\r\n");
      out.write("	");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    \r\n");
      out.write("	<input type=\"hidden\" id=\"boardId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("    ");
      if (_jspx_meth_c_005fif_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <hr>\r\n");
      out.write("    <div style=\"text-align: center;\">\r\n");
      out.write("    	<div id=\"replies\">\r\n");
      out.write("    	</div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("    	$('#btnAdd').click(function(){\r\n");
      out.write("    		let boardId = $('#boardId').val(); // 게시판 번호 데이터\r\n");
      out.write("    		let memberId = $('#memberId').val(); // 작성자 데이터\r\n");
      out.write("    		let replyContent = $('#replyContent').val(); // 댓글 내용 데이터\r\n");
      out.write("    		\r\n");
      out.write("    		let obj = {\r\n");
      out.write("    				'boardId' : boardId,\r\n");
      out.write("    				'memberId' : memberId,\r\n");
      out.write("    				'replyContent' : replyContent\r\n");
      out.write("    				\r\n");
      out.write("    		};\r\n");
      out.write("    		console.log(obj);\r\n");
      out.write("    		\r\n");
      out.write("    		// $.ajax로 송수신\r\n");
      out.write("    		$.ajax({\r\n");
      out.write("    			type : 'POST',\r\n");
      out.write("    			url : 'replies/add',\r\n");
      out.write("    			data : {'obj' : JSON.stringify(obj)}, // JSON으로 변환\r\n");
      out.write("    			success: function(result){\r\n");
      out.write("    				console.log(result);\r\n");
      out.write("    				if(result == 'success'){\r\n");
      out.write("    					alert('댓글 입력 성공')\r\n");
      out.write("    					$('#replyContent').val('');\r\n");
      out.write("                        getAllReplies();\r\n");
      out.write("    				}\r\n");
      out.write("    			}\r\n");
      out.write("    		})\r\n");
      out.write("    	}); // end btnAdd.click()\r\n");
      out.write("    	\r\n");
      out.write("    	getAllReplies();\r\n");
      out.write("    	// 현재 게시글의 댓글 전체 가져오기\r\n");
      out.write("    	function getAllReplies(){\r\n");
      out.write("    		// 댓글을 가져오기 위해 boardId 필요\r\n");
      out.write("    		let boardId = $('#boardId').val();\r\n");
      out.write("    		\r\n");
      out.write("    		// url에 boardId 전송\r\n");
      out.write("    		let url = 'replies/all?boardId=' + boardId;\r\n");
      out.write("    		\r\n");
      out.write("    		// ajax로 전체 데이터 GET\r\n");
      out.write("    		$.getJSON(url, function(data){\r\n");
      out.write("    			// console.log(data);\r\n");
      out.write("    			\r\n");
      out.write("    			let list = ''; // 댓글 데이터를 HTML에 표현할 문자열 변수\r\n");
      out.write("    			let memberId = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("    			console.log('memberId = ' + memberId);\r\n");
      out.write("    			\r\n");
      out.write("    			$(data).each(function(){\r\n");
      out.write("    				// 퀴즈 : 로그인한 사용자와 작성자가 같은 경우에만\r\n");
      out.write("    				//		 댓글 수정/삭제가 가능하도록 구현\r\n");
      out.write("    				// this : 컬렉션(배열)의 각 인덱스 데이터를 의미\r\n");
      out.write("    				console.log(this);\r\n");
      out.write("    			\r\n");
      out.write("    				// replyDateCreated는 string 타입이므로 date 타입으로 변경\r\n");
      out.write("    				let replyDateCreated = new Date(this.replyDateCreated);\r\n");
      out.write("    				//let disabled = '';\r\n");
      out.write("    				let readonly = '';\r\n");
      out.write("    				\r\n");
      out.write("    				if(memberId != this.memberId){\r\n");
      out.write("    				//	disabled = 'disabled';\r\n");
      out.write("    					readonly = 'readonly';\r\n");
      out.write("    				}\r\n");
      out.write("    				list += '<div class=\"reply_item\">'\r\n");
      out.write("    					+ '<pre>'\r\n");
      out.write("    					+ '<input type=\"hidden\" id=\"replyId\" value=\"'+ this.replyId +'\">'\r\n");
      out.write("    					+ this.memberId\r\n");
      out.write("    					+ '      ' // 공백\r\n");
      out.write("    					+ '<input type=\"text\" id=\"replyContent\" '+ readonly +' value=\"'+ this.replyContent +'\">'\r\n");
      out.write("    					+ '      ' // 공백\r\n");
      out.write("    					+ replyDateCreated;\r\n");
      out.write("    					\r\n");
      out.write("    				if ('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("' && '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("' == this.memberId){\r\n");
      out.write("    				list +=	'      ' // 공백\r\n");
      out.write("    				//	+ '<button class=\"btn_update\" '+ disabled +'>수정</button>'\r\n");
      out.write("    					+ '<button class=\"btn_update\">수정</button>'\r\n");
      out.write("    				//	+ '<button class=\"btn_delete\" '+ disalbed +'>삭제</button>';\r\n");
      out.write("    					+ '<button class=\"btn_delete\">삭제</button>';\r\n");
      out.write("    				}\r\n");
      out.write("    					\r\n");
      out.write("    				list += '</pre>'\r\n");
      out.write("    					 + '</div>';\r\n");
      out.write("    			}); // end each()\r\n");
      out.write("    			\r\n");
      out.write("    			$('#replies').html(list);\r\n");
      out.write("    			\r\n");
      out.write("    		}); // end getJSON()\r\n");
      out.write("    		\r\n");
      out.write("    	} // end getAllReplies()\r\n");
      out.write("    	 \r\n");
      out.write("    	// 선택된 댓글 수정\r\n");
      out.write("    	$('#replies').on('click', '.reply_item .btn_update', function(){\r\n");
      out.write("    		console.log(this);\r\n");
      out.write("    		\r\n");
      out.write("    		// 선택된 수정 버튼과 같은 노드에 있는 replyId, replyContent 값을 저장\r\n");
      out.write("    		// prevAll() : 선택된 노드 이전에 있는 모든 형제 노드에 접근\r\n");
      out.write("    		let replyId = $(this).prevAll('#replyId').val();\r\n");
      out.write("    		let replyContent = $(this).prevAll('#replyContent').val();\r\n");
      out.write("    		console.log('선택된 댓글 번호 : ' + replyId + ', 댓글 내용 : ' + replyContent);\r\n");
      out.write("    		\r\n");
      out.write("    		let obj = {\r\n");
      out.write("    	            'replyId': replyId,\r\n");
      out.write("    	            'replyContent': replyContent\r\n");
      out.write("    	        };\r\n");
      out.write("\r\n");
      out.write("    	        console.log(obj);\r\n");
      out.write("\r\n");
      out.write("    	        $.ajax({\r\n");
      out.write("    	            type: 'POST',\r\n");
      out.write("    	            url: 'replies/update',\r\n");
      out.write("    	            data: { 'obj': JSON.stringify(obj) },\r\n");
      out.write("    	            success: function (result) {\r\n");
      out.write("    	                console.log(result);\r\n");
      out.write("    	                if (result === 'success') {\r\n");
      out.write("    	                    alert('댓글 수정 성공');\r\n");
      out.write("    	                    getAllReplies();\r\n");
      out.write("    	                } else {\r\n");
      out.write("    	                    alert('댓글 수정 실패');\r\n");
      out.write("    	                }\r\n");
      out.write("    	            }\r\n");
      out.write("    	        });\r\n");
      out.write("    	});\r\n");
      out.write("    	\r\n");
      out.write("    	// 선택된 댓글 삭제\r\n");
      out.write("    	$('#replies').on('click', '.reply_item .btn_delete', function(){\r\n");
      out.write("    		console.log(this);\r\n");
      out.write("    		\r\n");
      out.write("    		// 선택된 삭제 버튼과 같은 노드에 있는 replyId, replyContent 값을 저장\r\n");
      out.write("    		// prevAll() : 선택된 노드 이전에 있는 모든 형제 노드에 접근\r\n");
      out.write("    		let replyId = $(this).prevAll('#replyId').val();\r\n");
      out.write("    		console.log('선택된 댓글의 번호 : ' + replyId);\r\n");
      out.write("    		\r\n");
      out.write("    	        let obj = {\r\n");
      out.write("    	            'replyId': replyId\r\n");
      out.write("    	        };\r\n");
      out.write("\r\n");
      out.write("    	        console.log(obj);\r\n");
      out.write("\r\n");
      out.write("    	        $.ajax({\r\n");
      out.write("    	            type: 'POST',\r\n");
      out.write("    	            url: 'replies/delete',\r\n");
      out.write("    	            data: { 'obj': JSON.stringify(obj) },\r\n");
      out.write("    	            success: function (result) {\r\n");
      out.write("    	                console.log(result);\r\n");
      out.write("    	                if (result === 'success') {\r\n");
      out.write("    	                    alert('댓글 삭제 성공');\r\n");
      out.write("    	                    getAllReplies();\r\n");
      out.write("    	                } else {\r\n");
      out.write("    	                    alert('댓글 삭제 실패');\r\n");
      out.write("    	                }\r\n");
      out.write("    	            }\r\n");
      out.write("    	        });\r\n");
      out.write("    	    });\r\n");
      out.write("    }); // end document\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/board/detail.jsp(30,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberId == vo.memberId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("	\r\n");
          out.write("	<a href=\"update.do?boardId=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\r\n");
          out.write("		<input type=\"button\" value=\"글 수정\"></a>\r\n");
          out.write("		<form action=\"delete.do\" method=\"POST\">\r\n");
          out.write("			<input type=\"hidden\" name=\"boardId\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo.boardId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\r\n");
          out.write("			<input type=\"submit\" value=\"글 삭제\">\r\n");
          out.write("   		</form>\r\n");
          out.write("	");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/board/detail.jsp(39,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty sessionScope.memberId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("    	* 댓글은 로그인이 필요한 서비스입니다.\r\n");
          out.write("    	<a href=\"login.go\">로그인하기</a>\r\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent(null);
      // /WEB-INF/board/detail.jsp(45,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.memberId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("    \r\n");
          out.write("    	<div style=\"text-align: center;\">\r\n");
          out.write("			<input type=\"text\" id=\"memberId\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" readonly=\"readonly\">\r\n");
          out.write("			<input type=\"text\" id=\"replyContent\">\r\n");
          out.write("			<button id=\"btnAdd\">작성</button>\r\n");
          out.write("    	</div>\r\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }
}
